Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON program_vars block
Rule 2     program_vars -> vars
Rule 3     program_vars -> empty
Rule 4     block -> LEFTBRACKET statement_block RIGHTBRACKET
Rule 5     statement_block -> statement statement_block
Rule 6     statement_block -> empty
Rule 7     statement -> assignment
Rule 8     statement -> condition
Rule 9     statement -> writing
Rule 10    expression -> exp comparation
Rule 11    comparation -> GREATER comparation_exp
Rule 12    comparation -> LESS comparation_exp
Rule 13    comparation -> NOTEQUAL comparation_exp
Rule 14    comparation -> empty
Rule 15    comparation_exp -> exp
Rule 16    exp -> term operator
Rule 17    operator -> PLUS term operator
Rule 18    operator -> MINUS term operator
Rule 19    operator -> empty
Rule 20    term -> factor term_operator
Rule 21    term_operator -> TIMES factor term_operator
Rule 22    term_operator -> DIVIDE factor term_operator
Rule 23    term_operator -> empty
Rule 24    factor -> LEFTPAREN expression RIGHTPAREN
Rule 25    factor -> sign var_cte
Rule 26    sign -> PLUS
Rule 27    sign -> MINUS
Rule 28    sign -> empty
Rule 29    var_cte -> ID
Rule 30    var_cte -> CTEI
Rule 31    var_cte -> CTEF
Rule 32    vars -> VAR var_id COLON type SEMICOLON vars_block
Rule 33    var_id -> ID var_id_2
Rule 34    var_id_2 -> COMMA ID var_id_2
Rule 35    var_id_2 -> empty
Rule 36    type -> INT
Rule 37    type -> FLOAT
Rule 38    vars_block -> var_id COLON type SEMICOLON vars_block
Rule 39    vars_block -> empty
Rule 40    assignment -> ID EQUALS expression SEMICOLON
Rule 41    condition -> IF LEFTPAREN expression RIGHTPAREN block else_condition SEMICOLON
Rule 42    else_condition -> ELSE block
Rule 43    else_condition -> empty
Rule 44    writing -> PRINT LEFTPAREN print_val RIGHTPAREN SEMICOLON
Rule 45    print_val -> expression print_exp
Rule 46    print_val -> CTESTRING print_exp
Rule 47    print_exp -> COMMA print_val
Rule 48    print_exp -> empty
Rule 49    empty -> <empty>

Terminals, with rules where they appear

COLON                : 32 38
COMMA                : 34 47
CTEF                 : 31
CTEI                 : 30
CTESTRING            : 46
DIVIDE               : 22
ELSE                 : 42
EQUALS               : 40
FLOAT                : 37
GREATER              : 11
ID                   : 1 29 33 34 40
IF                   : 41
INT                  : 36
LEFTBRACKET          : 4
LEFTPAREN            : 24 41 44
LESS                 : 12
MINUS                : 18 27
NOTEQUAL             : 13
PLUS                 : 17 26
PRINT                : 44
PROGRAM              : 1
RIGHTBRACKET         : 4
RIGHTPAREN           : 24 41 44
SEMICOLON            : 1 32 38 40 41 44
TIMES                : 21
VAR                  : 32
error                : 

Nonterminals, with rules where they appear

assignment           : 7
block                : 1 41 42
comparation          : 10
comparation_exp      : 11 12 13
condition            : 8
else_condition       : 41
empty                : 3 6 14 19 23 28 35 39 43 48
exp                  : 10 15
expression           : 24 40 41 45
factor               : 20 21 22
operator             : 16 17 18
print_exp            : 45 46
print_val            : 44 47
program              : 0
program_vars         : 1
sign                 : 25
statement            : 5
statement_block      : 4 5
term                 : 16 17 18
term_operator        : 20 21 22
type                 : 32 38
var_cte              : 25
var_id               : 32 38
var_id_2             : 33 34
vars                 : 2
vars_block           : 32 38
writing              : 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON program_vars block

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON program_vars block

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON program_vars block

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . program_vars block
    (2) program_vars -> . vars
    (3) program_vars -> . empty
    (32) vars -> . VAR var_id COLON type SEMICOLON vars_block
    (49) empty -> .

    VAR             shift and go to state 8
    LEFTBRACKET     reduce using rule 49 (empty -> .)

    program_vars                   shift and go to state 5
    vars                           shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON program_vars . block
    (4) block -> . LEFTBRACKET statement_block RIGHTBRACKET

    LEFTBRACKET     shift and go to state 10

    block                          shift and go to state 9

state 6

    (2) program_vars -> vars .

    LEFTBRACKET     reduce using rule 2 (program_vars -> vars .)


state 7

    (3) program_vars -> empty .

    LEFTBRACKET     reduce using rule 3 (program_vars -> empty .)


state 8

    (32) vars -> VAR . var_id COLON type SEMICOLON vars_block
    (33) var_id -> . ID var_id_2

    ID              shift and go to state 12

    var_id                         shift and go to state 11

state 9

    (1) program -> PROGRAM ID SEMICOLON program_vars block .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON program_vars block .)


state 10

    (4) block -> LEFTBRACKET . statement_block RIGHTBRACKET
    (5) statement_block -> . statement statement_block
    (6) statement_block -> . empty
    (7) statement -> . assignment
    (8) statement -> . condition
    (9) statement -> . writing
    (49) empty -> .
    (40) assignment -> . ID EQUALS expression SEMICOLON
    (41) condition -> . IF LEFTPAREN expression RIGHTPAREN block else_condition SEMICOLON
    (44) writing -> . PRINT LEFTPAREN print_val RIGHTPAREN SEMICOLON

    RIGHTBRACKET    reduce using rule 49 (empty -> .)
    ID              shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21

    statement_block                shift and go to state 13
    statement                      shift and go to state 14
    empty                          shift and go to state 15
    assignment                     shift and go to state 16
    condition                      shift and go to state 17
    writing                        shift and go to state 18

state 11

    (32) vars -> VAR var_id . COLON type SEMICOLON vars_block

    COLON           shift and go to state 22


state 12

    (33) var_id -> ID . var_id_2
    (34) var_id_2 -> . COMMA ID var_id_2
    (35) var_id_2 -> . empty
    (49) empty -> .

    COMMA           shift and go to state 24
    COLON           reduce using rule 49 (empty -> .)

    var_id_2                       shift and go to state 23
    empty                          shift and go to state 25

state 13

    (4) block -> LEFTBRACKET statement_block . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 26


state 14

    (5) statement_block -> statement . statement_block
    (5) statement_block -> . statement statement_block
    (6) statement_block -> . empty
    (7) statement -> . assignment
    (8) statement -> . condition
    (9) statement -> . writing
    (49) empty -> .
    (40) assignment -> . ID EQUALS expression SEMICOLON
    (41) condition -> . IF LEFTPAREN expression RIGHTPAREN block else_condition SEMICOLON
    (44) writing -> . PRINT LEFTPAREN print_val RIGHTPAREN SEMICOLON

    RIGHTBRACKET    reduce using rule 49 (empty -> .)
    ID              shift and go to state 19
    IF              shift and go to state 20
    PRINT           shift and go to state 21

    statement                      shift and go to state 14
    statement_block                shift and go to state 27
    empty                          shift and go to state 15
    assignment                     shift and go to state 16
    condition                      shift and go to state 17
    writing                        shift and go to state 18

state 15

    (6) statement_block -> empty .

    RIGHTBRACKET    reduce using rule 6 (statement_block -> empty .)


state 16

    (7) statement -> assignment .

    ID              reduce using rule 7 (statement -> assignment .)
    IF              reduce using rule 7 (statement -> assignment .)
    PRINT           reduce using rule 7 (statement -> assignment .)
    RIGHTBRACKET    reduce using rule 7 (statement -> assignment .)


state 17

    (8) statement -> condition .

    ID              reduce using rule 8 (statement -> condition .)
    IF              reduce using rule 8 (statement -> condition .)
    PRINT           reduce using rule 8 (statement -> condition .)
    RIGHTBRACKET    reduce using rule 8 (statement -> condition .)


state 18

    (9) statement -> writing .

    ID              reduce using rule 9 (statement -> writing .)
    IF              reduce using rule 9 (statement -> writing .)
    PRINT           reduce using rule 9 (statement -> writing .)
    RIGHTBRACKET    reduce using rule 9 (statement -> writing .)


state 19

    (40) assignment -> ID . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 28


state 20

    (41) condition -> IF . LEFTPAREN expression RIGHTPAREN block else_condition SEMICOLON

    LEFTPAREN       shift and go to state 29


state 21

    (44) writing -> PRINT . LEFTPAREN print_val RIGHTPAREN SEMICOLON

    LEFTPAREN       shift and go to state 30


state 22

    (32) vars -> VAR var_id COLON . type SEMICOLON vars_block
    (36) type -> . INT
    (37) type -> . FLOAT

    INT             shift and go to state 32
    FLOAT           shift and go to state 33

    type                           shift and go to state 31

state 23

    (33) var_id -> ID var_id_2 .

    COLON           reduce using rule 33 (var_id -> ID var_id_2 .)


state 24

    (34) var_id_2 -> COMMA . ID var_id_2

    ID              shift and go to state 34


state 25

    (35) var_id_2 -> empty .

    COLON           reduce using rule 35 (var_id_2 -> empty .)


state 26

    (4) block -> LEFTBRACKET statement_block RIGHTBRACKET .

    $end            reduce using rule 4 (block -> LEFTBRACKET statement_block RIGHTBRACKET .)
    ELSE            reduce using rule 4 (block -> LEFTBRACKET statement_block RIGHTBRACKET .)
    SEMICOLON       reduce using rule 4 (block -> LEFTBRACKET statement_block RIGHTBRACKET .)


state 27

    (5) statement_block -> statement statement_block .

    RIGHTBRACKET    reduce using rule 5 (statement_block -> statement statement_block .)


state 28

    (40) assignment -> ID EQUALS . expression SEMICOLON
    (10) expression -> . exp comparation
    (16) exp -> . term operator
    (20) term -> . factor term_operator
    (24) factor -> . LEFTPAREN expression RIGHTPAREN
    (25) factor -> . sign var_cte
    (26) sign -> . PLUS
    (27) sign -> . MINUS
    (28) sign -> . empty
    (49) empty -> .

    LEFTPAREN       shift and go to state 39
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              reduce using rule 49 (empty -> .)
    CTEI            reduce using rule 49 (empty -> .)
    CTEF            reduce using rule 49 (empty -> .)

    expression                     shift and go to state 35
    exp                            shift and go to state 36
    term                           shift and go to state 37
    factor                         shift and go to state 38
    sign                           shift and go to state 40
    empty                          shift and go to state 43

state 29

    (41) condition -> IF LEFTPAREN . expression RIGHTPAREN block else_condition SEMICOLON
    (10) expression -> . exp comparation
    (16) exp -> . term operator
    (20) term -> . factor term_operator
    (24) factor -> . LEFTPAREN expression RIGHTPAREN
    (25) factor -> . sign var_cte
    (26) sign -> . PLUS
    (27) sign -> . MINUS
    (28) sign -> . empty
    (49) empty -> .

    LEFTPAREN       shift and go to state 39
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              reduce using rule 49 (empty -> .)
    CTEI            reduce using rule 49 (empty -> .)
    CTEF            reduce using rule 49 (empty -> .)

    expression                     shift and go to state 44
    exp                            shift and go to state 36
    term                           shift and go to state 37
    factor                         shift and go to state 38
    sign                           shift and go to state 40
    empty                          shift and go to state 43

state 30

    (44) writing -> PRINT LEFTPAREN . print_val RIGHTPAREN SEMICOLON
    (45) print_val -> . expression print_exp
    (46) print_val -> . CTESTRING print_exp
    (10) expression -> . exp comparation
    (16) exp -> . term operator
    (20) term -> . factor term_operator
    (24) factor -> . LEFTPAREN expression RIGHTPAREN
    (25) factor -> . sign var_cte
    (26) sign -> . PLUS
    (27) sign -> . MINUS
    (28) sign -> . empty
    (49) empty -> .

    CTESTRING       shift and go to state 47
    LEFTPAREN       shift and go to state 39
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              reduce using rule 49 (empty -> .)
    CTEI            reduce using rule 49 (empty -> .)
    CTEF            reduce using rule 49 (empty -> .)

    print_val                      shift and go to state 45
    expression                     shift and go to state 46
    exp                            shift and go to state 36
    term                           shift and go to state 37
    factor                         shift and go to state 38
    sign                           shift and go to state 40
    empty                          shift and go to state 43

state 31

    (32) vars -> VAR var_id COLON type . SEMICOLON vars_block

    SEMICOLON       shift and go to state 48


state 32

    (36) type -> INT .

    SEMICOLON       reduce using rule 36 (type -> INT .)


state 33

    (37) type -> FLOAT .

    SEMICOLON       reduce using rule 37 (type -> FLOAT .)


state 34

    (34) var_id_2 -> COMMA ID . var_id_2
    (34) var_id_2 -> . COMMA ID var_id_2
    (35) var_id_2 -> . empty
    (49) empty -> .

    COMMA           shift and go to state 24
    COLON           reduce using rule 49 (empty -> .)

    var_id_2                       shift and go to state 49
    empty                          shift and go to state 25

state 35

    (40) assignment -> ID EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 50


state 36

    (10) expression -> exp . comparation
    (11) comparation -> . GREATER comparation_exp
    (12) comparation -> . LESS comparation_exp
    (13) comparation -> . NOTEQUAL comparation_exp
    (14) comparation -> . empty
    (49) empty -> .

    GREATER         shift and go to state 52
    LESS            shift and go to state 53
    NOTEQUAL        shift and go to state 54
    SEMICOLON       reduce using rule 49 (empty -> .)
    RIGHTPAREN      reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    comparation                    shift and go to state 51
    empty                          shift and go to state 55

state 37

    (16) exp -> term . operator
    (17) operator -> . PLUS term operator
    (18) operator -> . MINUS term operator
    (19) operator -> . empty
    (49) empty -> .

    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    GREATER         reduce using rule 49 (empty -> .)
    LESS            reduce using rule 49 (empty -> .)
    NOTEQUAL        reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    RIGHTPAREN      reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    operator                       shift and go to state 56
    empty                          shift and go to state 59

state 38

    (20) term -> factor . term_operator
    (21) term_operator -> . TIMES factor term_operator
    (22) term_operator -> . DIVIDE factor term_operator
    (23) term_operator -> . empty
    (49) empty -> .

    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    PLUS            reduce using rule 49 (empty -> .)
    MINUS           reduce using rule 49 (empty -> .)
    GREATER         reduce using rule 49 (empty -> .)
    LESS            reduce using rule 49 (empty -> .)
    NOTEQUAL        reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    RIGHTPAREN      reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    term_operator                  shift and go to state 60
    empty                          shift and go to state 63

state 39

    (24) factor -> LEFTPAREN . expression RIGHTPAREN
    (10) expression -> . exp comparation
    (16) exp -> . term operator
    (20) term -> . factor term_operator
    (24) factor -> . LEFTPAREN expression RIGHTPAREN
    (25) factor -> . sign var_cte
    (26) sign -> . PLUS
    (27) sign -> . MINUS
    (28) sign -> . empty
    (49) empty -> .

    LEFTPAREN       shift and go to state 39
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              reduce using rule 49 (empty -> .)
    CTEI            reduce using rule 49 (empty -> .)
    CTEF            reduce using rule 49 (empty -> .)

    expression                     shift and go to state 64
    exp                            shift and go to state 36
    term                           shift and go to state 37
    factor                         shift and go to state 38
    sign                           shift and go to state 40
    empty                          shift and go to state 43

state 40

    (25) factor -> sign . var_cte
    (29) var_cte -> . ID
    (30) var_cte -> . CTEI
    (31) var_cte -> . CTEF

    ID              shift and go to state 66
    CTEI            shift and go to state 67
    CTEF            shift and go to state 68

    var_cte                        shift and go to state 65

state 41

    (26) sign -> PLUS .

    ID              reduce using rule 26 (sign -> PLUS .)
    CTEI            reduce using rule 26 (sign -> PLUS .)
    CTEF            reduce using rule 26 (sign -> PLUS .)


state 42

    (27) sign -> MINUS .

    ID              reduce using rule 27 (sign -> MINUS .)
    CTEI            reduce using rule 27 (sign -> MINUS .)
    CTEF            reduce using rule 27 (sign -> MINUS .)


state 43

    (28) sign -> empty .

    ID              reduce using rule 28 (sign -> empty .)
    CTEI            reduce using rule 28 (sign -> empty .)
    CTEF            reduce using rule 28 (sign -> empty .)


state 44

    (41) condition -> IF LEFTPAREN expression . RIGHTPAREN block else_condition SEMICOLON

    RIGHTPAREN      shift and go to state 69


state 45

    (44) writing -> PRINT LEFTPAREN print_val . RIGHTPAREN SEMICOLON

    RIGHTPAREN      shift and go to state 70


state 46

    (45) print_val -> expression . print_exp
    (47) print_exp -> . COMMA print_val
    (48) print_exp -> . empty
    (49) empty -> .

    COMMA           shift and go to state 72
    RIGHTPAREN      reduce using rule 49 (empty -> .)

    print_exp                      shift and go to state 71
    empty                          shift and go to state 73

state 47

    (46) print_val -> CTESTRING . print_exp
    (47) print_exp -> . COMMA print_val
    (48) print_exp -> . empty
    (49) empty -> .

    COMMA           shift and go to state 72
    RIGHTPAREN      reduce using rule 49 (empty -> .)

    print_exp                      shift and go to state 74
    empty                          shift and go to state 73

state 48

    (32) vars -> VAR var_id COLON type SEMICOLON . vars_block
    (38) vars_block -> . var_id COLON type SEMICOLON vars_block
    (39) vars_block -> . empty
    (33) var_id -> . ID var_id_2
    (49) empty -> .

    ID              shift and go to state 12
    LEFTBRACKET     reduce using rule 49 (empty -> .)

    var_id                         shift and go to state 75
    vars_block                     shift and go to state 76
    empty                          shift and go to state 77

state 49

    (34) var_id_2 -> COMMA ID var_id_2 .

    COLON           reduce using rule 34 (var_id_2 -> COMMA ID var_id_2 .)


state 50

    (40) assignment -> ID EQUALS expression SEMICOLON .

    ID              reduce using rule 40 (assignment -> ID EQUALS expression SEMICOLON .)
    IF              reduce using rule 40 (assignment -> ID EQUALS expression SEMICOLON .)
    PRINT           reduce using rule 40 (assignment -> ID EQUALS expression SEMICOLON .)
    RIGHTBRACKET    reduce using rule 40 (assignment -> ID EQUALS expression SEMICOLON .)


state 51

    (10) expression -> exp comparation .

    SEMICOLON       reduce using rule 10 (expression -> exp comparation .)
    RIGHTPAREN      reduce using rule 10 (expression -> exp comparation .)
    COMMA           reduce using rule 10 (expression -> exp comparation .)


state 52

    (11) comparation -> GREATER . comparation_exp
    (15) comparation_exp -> . exp
    (16) exp -> . term operator
    (20) term -> . factor term_operator
    (24) factor -> . LEFTPAREN expression RIGHTPAREN
    (25) factor -> . sign var_cte
    (26) sign -> . PLUS
    (27) sign -> . MINUS
    (28) sign -> . empty
    (49) empty -> .

    LEFTPAREN       shift and go to state 39
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              reduce using rule 49 (empty -> .)
    CTEI            reduce using rule 49 (empty -> .)
    CTEF            reduce using rule 49 (empty -> .)

    comparation_exp                shift and go to state 78
    exp                            shift and go to state 79
    term                           shift and go to state 37
    factor                         shift and go to state 38
    sign                           shift and go to state 40
    empty                          shift and go to state 43

state 53

    (12) comparation -> LESS . comparation_exp
    (15) comparation_exp -> . exp
    (16) exp -> . term operator
    (20) term -> . factor term_operator
    (24) factor -> . LEFTPAREN expression RIGHTPAREN
    (25) factor -> . sign var_cte
    (26) sign -> . PLUS
    (27) sign -> . MINUS
    (28) sign -> . empty
    (49) empty -> .

    LEFTPAREN       shift and go to state 39
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              reduce using rule 49 (empty -> .)
    CTEI            reduce using rule 49 (empty -> .)
    CTEF            reduce using rule 49 (empty -> .)

    comparation_exp                shift and go to state 80
    exp                            shift and go to state 79
    term                           shift and go to state 37
    factor                         shift and go to state 38
    sign                           shift and go to state 40
    empty                          shift and go to state 43

state 54

    (13) comparation -> NOTEQUAL . comparation_exp
    (15) comparation_exp -> . exp
    (16) exp -> . term operator
    (20) term -> . factor term_operator
    (24) factor -> . LEFTPAREN expression RIGHTPAREN
    (25) factor -> . sign var_cte
    (26) sign -> . PLUS
    (27) sign -> . MINUS
    (28) sign -> . empty
    (49) empty -> .

    LEFTPAREN       shift and go to state 39
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              reduce using rule 49 (empty -> .)
    CTEI            reduce using rule 49 (empty -> .)
    CTEF            reduce using rule 49 (empty -> .)

    comparation_exp                shift and go to state 81
    exp                            shift and go to state 79
    term                           shift and go to state 37
    factor                         shift and go to state 38
    sign                           shift and go to state 40
    empty                          shift and go to state 43

state 55

    (14) comparation -> empty .

    SEMICOLON       reduce using rule 14 (comparation -> empty .)
    RIGHTPAREN      reduce using rule 14 (comparation -> empty .)
    COMMA           reduce using rule 14 (comparation -> empty .)


state 56

    (16) exp -> term operator .

    GREATER         reduce using rule 16 (exp -> term operator .)
    LESS            reduce using rule 16 (exp -> term operator .)
    NOTEQUAL        reduce using rule 16 (exp -> term operator .)
    SEMICOLON       reduce using rule 16 (exp -> term operator .)
    RIGHTPAREN      reduce using rule 16 (exp -> term operator .)
    COMMA           reduce using rule 16 (exp -> term operator .)


state 57

    (17) operator -> PLUS . term operator
    (20) term -> . factor term_operator
    (24) factor -> . LEFTPAREN expression RIGHTPAREN
    (25) factor -> . sign var_cte
    (26) sign -> . PLUS
    (27) sign -> . MINUS
    (28) sign -> . empty
    (49) empty -> .

    LEFTPAREN       shift and go to state 39
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              reduce using rule 49 (empty -> .)
    CTEI            reduce using rule 49 (empty -> .)
    CTEF            reduce using rule 49 (empty -> .)

    term                           shift and go to state 82
    factor                         shift and go to state 38
    sign                           shift and go to state 40
    empty                          shift and go to state 43

state 58

    (18) operator -> MINUS . term operator
    (20) term -> . factor term_operator
    (24) factor -> . LEFTPAREN expression RIGHTPAREN
    (25) factor -> . sign var_cte
    (26) sign -> . PLUS
    (27) sign -> . MINUS
    (28) sign -> . empty
    (49) empty -> .

    LEFTPAREN       shift and go to state 39
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              reduce using rule 49 (empty -> .)
    CTEI            reduce using rule 49 (empty -> .)
    CTEF            reduce using rule 49 (empty -> .)

    term                           shift and go to state 83
    factor                         shift and go to state 38
    sign                           shift and go to state 40
    empty                          shift and go to state 43

state 59

    (19) operator -> empty .

    GREATER         reduce using rule 19 (operator -> empty .)
    LESS            reduce using rule 19 (operator -> empty .)
    NOTEQUAL        reduce using rule 19 (operator -> empty .)
    SEMICOLON       reduce using rule 19 (operator -> empty .)
    RIGHTPAREN      reduce using rule 19 (operator -> empty .)
    COMMA           reduce using rule 19 (operator -> empty .)


state 60

    (20) term -> factor term_operator .

    PLUS            reduce using rule 20 (term -> factor term_operator .)
    MINUS           reduce using rule 20 (term -> factor term_operator .)
    GREATER         reduce using rule 20 (term -> factor term_operator .)
    LESS            reduce using rule 20 (term -> factor term_operator .)
    NOTEQUAL        reduce using rule 20 (term -> factor term_operator .)
    SEMICOLON       reduce using rule 20 (term -> factor term_operator .)
    RIGHTPAREN      reduce using rule 20 (term -> factor term_operator .)
    COMMA           reduce using rule 20 (term -> factor term_operator .)


state 61

    (21) term_operator -> TIMES . factor term_operator
    (24) factor -> . LEFTPAREN expression RIGHTPAREN
    (25) factor -> . sign var_cte
    (26) sign -> . PLUS
    (27) sign -> . MINUS
    (28) sign -> . empty
    (49) empty -> .

    LEFTPAREN       shift and go to state 39
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              reduce using rule 49 (empty -> .)
    CTEI            reduce using rule 49 (empty -> .)
    CTEF            reduce using rule 49 (empty -> .)

    factor                         shift and go to state 84
    sign                           shift and go to state 40
    empty                          shift and go to state 43

state 62

    (22) term_operator -> DIVIDE . factor term_operator
    (24) factor -> . LEFTPAREN expression RIGHTPAREN
    (25) factor -> . sign var_cte
    (26) sign -> . PLUS
    (27) sign -> . MINUS
    (28) sign -> . empty
    (49) empty -> .

    LEFTPAREN       shift and go to state 39
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              reduce using rule 49 (empty -> .)
    CTEI            reduce using rule 49 (empty -> .)
    CTEF            reduce using rule 49 (empty -> .)

    factor                         shift and go to state 85
    sign                           shift and go to state 40
    empty                          shift and go to state 43

state 63

    (23) term_operator -> empty .

    PLUS            reduce using rule 23 (term_operator -> empty .)
    MINUS           reduce using rule 23 (term_operator -> empty .)
    GREATER         reduce using rule 23 (term_operator -> empty .)
    LESS            reduce using rule 23 (term_operator -> empty .)
    NOTEQUAL        reduce using rule 23 (term_operator -> empty .)
    SEMICOLON       reduce using rule 23 (term_operator -> empty .)
    RIGHTPAREN      reduce using rule 23 (term_operator -> empty .)
    COMMA           reduce using rule 23 (term_operator -> empty .)


state 64

    (24) factor -> LEFTPAREN expression . RIGHTPAREN

    RIGHTPAREN      shift and go to state 86


state 65

    (25) factor -> sign var_cte .

    TIMES           reduce using rule 25 (factor -> sign var_cte .)
    DIVIDE          reduce using rule 25 (factor -> sign var_cte .)
    PLUS            reduce using rule 25 (factor -> sign var_cte .)
    MINUS           reduce using rule 25 (factor -> sign var_cte .)
    GREATER         reduce using rule 25 (factor -> sign var_cte .)
    LESS            reduce using rule 25 (factor -> sign var_cte .)
    NOTEQUAL        reduce using rule 25 (factor -> sign var_cte .)
    SEMICOLON       reduce using rule 25 (factor -> sign var_cte .)
    RIGHTPAREN      reduce using rule 25 (factor -> sign var_cte .)
    COMMA           reduce using rule 25 (factor -> sign var_cte .)


state 66

    (29) var_cte -> ID .

    TIMES           reduce using rule 29 (var_cte -> ID .)
    DIVIDE          reduce using rule 29 (var_cte -> ID .)
    PLUS            reduce using rule 29 (var_cte -> ID .)
    MINUS           reduce using rule 29 (var_cte -> ID .)
    GREATER         reduce using rule 29 (var_cte -> ID .)
    LESS            reduce using rule 29 (var_cte -> ID .)
    NOTEQUAL        reduce using rule 29 (var_cte -> ID .)
    SEMICOLON       reduce using rule 29 (var_cte -> ID .)
    RIGHTPAREN      reduce using rule 29 (var_cte -> ID .)
    COMMA           reduce using rule 29 (var_cte -> ID .)


state 67

    (30) var_cte -> CTEI .

    TIMES           reduce using rule 30 (var_cte -> CTEI .)
    DIVIDE          reduce using rule 30 (var_cte -> CTEI .)
    PLUS            reduce using rule 30 (var_cte -> CTEI .)
    MINUS           reduce using rule 30 (var_cte -> CTEI .)
    GREATER         reduce using rule 30 (var_cte -> CTEI .)
    LESS            reduce using rule 30 (var_cte -> CTEI .)
    NOTEQUAL        reduce using rule 30 (var_cte -> CTEI .)
    SEMICOLON       reduce using rule 30 (var_cte -> CTEI .)
    RIGHTPAREN      reduce using rule 30 (var_cte -> CTEI .)
    COMMA           reduce using rule 30 (var_cte -> CTEI .)


state 68

    (31) var_cte -> CTEF .

    TIMES           reduce using rule 31 (var_cte -> CTEF .)
    DIVIDE          reduce using rule 31 (var_cte -> CTEF .)
    PLUS            reduce using rule 31 (var_cte -> CTEF .)
    MINUS           reduce using rule 31 (var_cte -> CTEF .)
    GREATER         reduce using rule 31 (var_cte -> CTEF .)
    LESS            reduce using rule 31 (var_cte -> CTEF .)
    NOTEQUAL        reduce using rule 31 (var_cte -> CTEF .)
    SEMICOLON       reduce using rule 31 (var_cte -> CTEF .)
    RIGHTPAREN      reduce using rule 31 (var_cte -> CTEF .)
    COMMA           reduce using rule 31 (var_cte -> CTEF .)


state 69

    (41) condition -> IF LEFTPAREN expression RIGHTPAREN . block else_condition SEMICOLON
    (4) block -> . LEFTBRACKET statement_block RIGHTBRACKET

    LEFTBRACKET     shift and go to state 10

    block                          shift and go to state 87

state 70

    (44) writing -> PRINT LEFTPAREN print_val RIGHTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 88


state 71

    (45) print_val -> expression print_exp .

    RIGHTPAREN      reduce using rule 45 (print_val -> expression print_exp .)


state 72

    (47) print_exp -> COMMA . print_val
    (45) print_val -> . expression print_exp
    (46) print_val -> . CTESTRING print_exp
    (10) expression -> . exp comparation
    (16) exp -> . term operator
    (20) term -> . factor term_operator
    (24) factor -> . LEFTPAREN expression RIGHTPAREN
    (25) factor -> . sign var_cte
    (26) sign -> . PLUS
    (27) sign -> . MINUS
    (28) sign -> . empty
    (49) empty -> .

    CTESTRING       shift and go to state 47
    LEFTPAREN       shift and go to state 39
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              reduce using rule 49 (empty -> .)
    CTEI            reduce using rule 49 (empty -> .)
    CTEF            reduce using rule 49 (empty -> .)

    print_val                      shift and go to state 89
    expression                     shift and go to state 46
    exp                            shift and go to state 36
    term                           shift and go to state 37
    factor                         shift and go to state 38
    sign                           shift and go to state 40
    empty                          shift and go to state 43

state 73

    (48) print_exp -> empty .

    RIGHTPAREN      reduce using rule 48 (print_exp -> empty .)


state 74

    (46) print_val -> CTESTRING print_exp .

    RIGHTPAREN      reduce using rule 46 (print_val -> CTESTRING print_exp .)


state 75

    (38) vars_block -> var_id . COLON type SEMICOLON vars_block

    COLON           shift and go to state 90


state 76

    (32) vars -> VAR var_id COLON type SEMICOLON vars_block .

    LEFTBRACKET     reduce using rule 32 (vars -> VAR var_id COLON type SEMICOLON vars_block .)


state 77

    (39) vars_block -> empty .

    LEFTBRACKET     reduce using rule 39 (vars_block -> empty .)


state 78

    (11) comparation -> GREATER comparation_exp .

    SEMICOLON       reduce using rule 11 (comparation -> GREATER comparation_exp .)
    RIGHTPAREN      reduce using rule 11 (comparation -> GREATER comparation_exp .)
    COMMA           reduce using rule 11 (comparation -> GREATER comparation_exp .)


state 79

    (15) comparation_exp -> exp .

    SEMICOLON       reduce using rule 15 (comparation_exp -> exp .)
    RIGHTPAREN      reduce using rule 15 (comparation_exp -> exp .)
    COMMA           reduce using rule 15 (comparation_exp -> exp .)


state 80

    (12) comparation -> LESS comparation_exp .

    SEMICOLON       reduce using rule 12 (comparation -> LESS comparation_exp .)
    RIGHTPAREN      reduce using rule 12 (comparation -> LESS comparation_exp .)
    COMMA           reduce using rule 12 (comparation -> LESS comparation_exp .)


state 81

    (13) comparation -> NOTEQUAL comparation_exp .

    SEMICOLON       reduce using rule 13 (comparation -> NOTEQUAL comparation_exp .)
    RIGHTPAREN      reduce using rule 13 (comparation -> NOTEQUAL comparation_exp .)
    COMMA           reduce using rule 13 (comparation -> NOTEQUAL comparation_exp .)


state 82

    (17) operator -> PLUS term . operator
    (17) operator -> . PLUS term operator
    (18) operator -> . MINUS term operator
    (19) operator -> . empty
    (49) empty -> .

    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    GREATER         reduce using rule 49 (empty -> .)
    LESS            reduce using rule 49 (empty -> .)
    NOTEQUAL        reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    RIGHTPAREN      reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    operator                       shift and go to state 91
    empty                          shift and go to state 59

state 83

    (18) operator -> MINUS term . operator
    (17) operator -> . PLUS term operator
    (18) operator -> . MINUS term operator
    (19) operator -> . empty
    (49) empty -> .

    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    GREATER         reduce using rule 49 (empty -> .)
    LESS            reduce using rule 49 (empty -> .)
    NOTEQUAL        reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    RIGHTPAREN      reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    operator                       shift and go to state 92
    empty                          shift and go to state 59

state 84

    (21) term_operator -> TIMES factor . term_operator
    (21) term_operator -> . TIMES factor term_operator
    (22) term_operator -> . DIVIDE factor term_operator
    (23) term_operator -> . empty
    (49) empty -> .

    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    PLUS            reduce using rule 49 (empty -> .)
    MINUS           reduce using rule 49 (empty -> .)
    GREATER         reduce using rule 49 (empty -> .)
    LESS            reduce using rule 49 (empty -> .)
    NOTEQUAL        reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    RIGHTPAREN      reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    term_operator                  shift and go to state 93
    empty                          shift and go to state 63

state 85

    (22) term_operator -> DIVIDE factor . term_operator
    (21) term_operator -> . TIMES factor term_operator
    (22) term_operator -> . DIVIDE factor term_operator
    (23) term_operator -> . empty
    (49) empty -> .

    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    PLUS            reduce using rule 49 (empty -> .)
    MINUS           reduce using rule 49 (empty -> .)
    GREATER         reduce using rule 49 (empty -> .)
    LESS            reduce using rule 49 (empty -> .)
    NOTEQUAL        reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    RIGHTPAREN      reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    term_operator                  shift and go to state 94
    empty                          shift and go to state 63

state 86

    (24) factor -> LEFTPAREN expression RIGHTPAREN .

    TIMES           reduce using rule 24 (factor -> LEFTPAREN expression RIGHTPAREN .)
    DIVIDE          reduce using rule 24 (factor -> LEFTPAREN expression RIGHTPAREN .)
    PLUS            reduce using rule 24 (factor -> LEFTPAREN expression RIGHTPAREN .)
    MINUS           reduce using rule 24 (factor -> LEFTPAREN expression RIGHTPAREN .)
    GREATER         reduce using rule 24 (factor -> LEFTPAREN expression RIGHTPAREN .)
    LESS            reduce using rule 24 (factor -> LEFTPAREN expression RIGHTPAREN .)
    NOTEQUAL        reduce using rule 24 (factor -> LEFTPAREN expression RIGHTPAREN .)
    SEMICOLON       reduce using rule 24 (factor -> LEFTPAREN expression RIGHTPAREN .)
    RIGHTPAREN      reduce using rule 24 (factor -> LEFTPAREN expression RIGHTPAREN .)
    COMMA           reduce using rule 24 (factor -> LEFTPAREN expression RIGHTPAREN .)


state 87

    (41) condition -> IF LEFTPAREN expression RIGHTPAREN block . else_condition SEMICOLON
    (42) else_condition -> . ELSE block
    (43) else_condition -> . empty
    (49) empty -> .

    ELSE            shift and go to state 96
    SEMICOLON       reduce using rule 49 (empty -> .)

    else_condition                 shift and go to state 95
    empty                          shift and go to state 97

state 88

    (44) writing -> PRINT LEFTPAREN print_val RIGHTPAREN SEMICOLON .

    ID              reduce using rule 44 (writing -> PRINT LEFTPAREN print_val RIGHTPAREN SEMICOLON .)
    IF              reduce using rule 44 (writing -> PRINT LEFTPAREN print_val RIGHTPAREN SEMICOLON .)
    PRINT           reduce using rule 44 (writing -> PRINT LEFTPAREN print_val RIGHTPAREN SEMICOLON .)
    RIGHTBRACKET    reduce using rule 44 (writing -> PRINT LEFTPAREN print_val RIGHTPAREN SEMICOLON .)


state 89

    (47) print_exp -> COMMA print_val .

    RIGHTPAREN      reduce using rule 47 (print_exp -> COMMA print_val .)


state 90

    (38) vars_block -> var_id COLON . type SEMICOLON vars_block
    (36) type -> . INT
    (37) type -> . FLOAT

    INT             shift and go to state 32
    FLOAT           shift and go to state 33

    type                           shift and go to state 98

state 91

    (17) operator -> PLUS term operator .

    GREATER         reduce using rule 17 (operator -> PLUS term operator .)
    LESS            reduce using rule 17 (operator -> PLUS term operator .)
    NOTEQUAL        reduce using rule 17 (operator -> PLUS term operator .)
    SEMICOLON       reduce using rule 17 (operator -> PLUS term operator .)
    RIGHTPAREN      reduce using rule 17 (operator -> PLUS term operator .)
    COMMA           reduce using rule 17 (operator -> PLUS term operator .)


state 92

    (18) operator -> MINUS term operator .

    GREATER         reduce using rule 18 (operator -> MINUS term operator .)
    LESS            reduce using rule 18 (operator -> MINUS term operator .)
    NOTEQUAL        reduce using rule 18 (operator -> MINUS term operator .)
    SEMICOLON       reduce using rule 18 (operator -> MINUS term operator .)
    RIGHTPAREN      reduce using rule 18 (operator -> MINUS term operator .)
    COMMA           reduce using rule 18 (operator -> MINUS term operator .)


state 93

    (21) term_operator -> TIMES factor term_operator .

    PLUS            reduce using rule 21 (term_operator -> TIMES factor term_operator .)
    MINUS           reduce using rule 21 (term_operator -> TIMES factor term_operator .)
    GREATER         reduce using rule 21 (term_operator -> TIMES factor term_operator .)
    LESS            reduce using rule 21 (term_operator -> TIMES factor term_operator .)
    NOTEQUAL        reduce using rule 21 (term_operator -> TIMES factor term_operator .)
    SEMICOLON       reduce using rule 21 (term_operator -> TIMES factor term_operator .)
    RIGHTPAREN      reduce using rule 21 (term_operator -> TIMES factor term_operator .)
    COMMA           reduce using rule 21 (term_operator -> TIMES factor term_operator .)


state 94

    (22) term_operator -> DIVIDE factor term_operator .

    PLUS            reduce using rule 22 (term_operator -> DIVIDE factor term_operator .)
    MINUS           reduce using rule 22 (term_operator -> DIVIDE factor term_operator .)
    GREATER         reduce using rule 22 (term_operator -> DIVIDE factor term_operator .)
    LESS            reduce using rule 22 (term_operator -> DIVIDE factor term_operator .)
    NOTEQUAL        reduce using rule 22 (term_operator -> DIVIDE factor term_operator .)
    SEMICOLON       reduce using rule 22 (term_operator -> DIVIDE factor term_operator .)
    RIGHTPAREN      reduce using rule 22 (term_operator -> DIVIDE factor term_operator .)
    COMMA           reduce using rule 22 (term_operator -> DIVIDE factor term_operator .)


state 95

    (41) condition -> IF LEFTPAREN expression RIGHTPAREN block else_condition . SEMICOLON

    SEMICOLON       shift and go to state 99


state 96

    (42) else_condition -> ELSE . block
    (4) block -> . LEFTBRACKET statement_block RIGHTBRACKET

    LEFTBRACKET     shift and go to state 10

    block                          shift and go to state 100

state 97

    (43) else_condition -> empty .

    SEMICOLON       reduce using rule 43 (else_condition -> empty .)


state 98

    (38) vars_block -> var_id COLON type . SEMICOLON vars_block

    SEMICOLON       shift and go to state 101


state 99

    (41) condition -> IF LEFTPAREN expression RIGHTPAREN block else_condition SEMICOLON .

    ID              reduce using rule 41 (condition -> IF LEFTPAREN expression RIGHTPAREN block else_condition SEMICOLON .)
    IF              reduce using rule 41 (condition -> IF LEFTPAREN expression RIGHTPAREN block else_condition SEMICOLON .)
    PRINT           reduce using rule 41 (condition -> IF LEFTPAREN expression RIGHTPAREN block else_condition SEMICOLON .)
    RIGHTBRACKET    reduce using rule 41 (condition -> IF LEFTPAREN expression RIGHTPAREN block else_condition SEMICOLON .)


state 100

    (42) else_condition -> ELSE block .

    SEMICOLON       reduce using rule 42 (else_condition -> ELSE block .)


state 101

    (38) vars_block -> var_id COLON type SEMICOLON . vars_block
    (38) vars_block -> . var_id COLON type SEMICOLON vars_block
    (39) vars_block -> . empty
    (33) var_id -> . ID var_id_2
    (49) empty -> .

    ID              shift and go to state 12
    LEFTBRACKET     reduce using rule 49 (empty -> .)

    var_id                         shift and go to state 75
    vars_block                     shift and go to state 102
    empty                          shift and go to state 77

state 102

    (38) vars_block -> var_id COLON type SEMICOLON vars_block .

    LEFTBRACKET     reduce using rule 38 (vars_block -> var_id COLON type SEMICOLON vars_block .)

